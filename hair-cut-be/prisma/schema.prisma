// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/database/generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  receptionist
  barber
  customer
}

enum Status {
  pending
  confirmed
  cancelled
  in_progress
  completed
  success
}

enum UserStatus {
  active
  inactive
}

enum AvailabilityStatus {
  available
  unavailable
}

model Booking {
  id              Int       @id @default(autoincrement())
  customerId      Int
  employeeId      Int?
  appointmentDate DateTime  @db.Date
  appointmentTime DateTime  @db.Time
  status          Status    @default(pending)
  totalPrice      Decimal   @default(0.00) @db.Decimal(10, 2)
  notes           String?   @db.Text
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt

  customer User             @relation("CustomerBookings", fields: [customerId], references: [id], onDelete: Cascade)
  employee User?            @relation("EmployeeBookings", fields: [employeeId], references: [id], onDelete: SetNull)
  services BookingService[]

  @@index([customerId])
  @@index([employeeId])
}

model BookingService {
  id        Int @id @default(autoincrement())
  bookingId Int
  serviceId Int

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([serviceId])
}

model Service {
  id              Int              @id @default(autoincrement())
  serviceName     String
  estimatedTime   Int // minutes
  price           Decimal          @db.Decimal(10, 2)
  createdAt       DateTime?        @default(now())
  description     String?          @db.VarChar(500)
  bannerImageUrl  String?          @db.VarChar(500)
  bookingServices BookingService[]
  steps           ServiceStep[]
}

model ServiceStep {
  id              Int     @id @default(autoincrement())
  serviceId       Int
  stepOrder       Int
  stepTitle       String
  stepDescription String? @db.Text
  stepImageUrl    String? @db.VarChar(500)

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
}

model User {
  id                 Int                 @id @default(autoincrement())
  username           String              @unique
  password           String
  email              String
  phone              String
  role               Role
  firstName          String?
  lastName           String?
  gender             Boolean
  address            String?
  birthDate          DateTime?           @db.Date
  CCCD               String?             @unique
  status             UserStatus          @default(active)
  availabilityStatus AvailabilityStatus?

  createdAt DateTime? @default(now())

  customerBookings Booking[] @relation("CustomerBookings")
  employeeBookings Booking[] @relation("EmployeeBookings")
}
