/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as GabaleImport } from './routes/gabale'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as DemoTableImport } from './routes/demo.table'
import { Route as ServicesHairCutIndexImport } from './routes/services/hair-cut/index'
import { Route as ServicesHairCutIdImport } from './routes/services/hair-cut/$id'

// Create/Update Routes

const GabaleRoute = GabaleImport.update({
  id: '/gabale',
  path: '/gabale',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const DemoTableRoute = DemoTableImport.update({
  id: '/demo/table',
  path: '/demo/table',
  getParentRoute: () => rootRoute,
} as any)

const ServicesHairCutIndexRoute = ServicesHairCutIndexImport.update({
  id: '/services/hair-cut/',
  path: '/services/hair-cut/',
  getParentRoute: () => rootRoute,
} as any)

const ServicesHairCutIdRoute = ServicesHairCutIdImport.update({
  id: '/services/hair-cut/$id',
  path: '/services/hair-cut/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/gabale': {
      id: '/gabale'
      path: '/gabale'
      fullPath: '/gabale'
      preLoaderRoute: typeof GabaleImport
      parentRoute: typeof rootRoute
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/demo/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/services/hair-cut/$id': {
      id: '/services/hair-cut/$id'
      path: '/services/hair-cut/$id'
      fullPath: '/services/hair-cut/$id'
      preLoaderRoute: typeof ServicesHairCutIdImport
      parentRoute: typeof rootRoute
    }
    '/services/hair-cut/': {
      id: '/services/hair-cut/'
      path: '/services/hair-cut'
      fullPath: '/services/hair-cut'
      preLoaderRoute: typeof ServicesHairCutIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/gabale': typeof GabaleRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/services/hair-cut/$id': typeof ServicesHairCutIdRoute
  '/services/hair-cut': typeof ServicesHairCutIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/gabale': typeof GabaleRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/services/hair-cut/$id': typeof ServicesHairCutIdRoute
  '/services/hair-cut': typeof ServicesHairCutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/gabale': typeof GabaleRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/services/hair-cut/$id': typeof ServicesHairCutIdRoute
  '/services/hair-cut/': typeof ServicesHairCutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/gabale'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/services/hair-cut/$id'
    | '/services/hair-cut'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/gabale'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/services/hair-cut/$id'
    | '/services/hair-cut'
  id:
    | '__root__'
    | '/'
    | '/gabale'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/services/hair-cut/$id'
    | '/services/hair-cut/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GabaleRoute: typeof GabaleRoute
  DemoTableRoute: typeof DemoTableRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  ServicesHairCutIdRoute: typeof ServicesHairCutIdRoute
  ServicesHairCutIndexRoute: typeof ServicesHairCutIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GabaleRoute: GabaleRoute,
  DemoTableRoute: DemoTableRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  ServicesHairCutIdRoute: ServicesHairCutIdRoute,
  ServicesHairCutIndexRoute: ServicesHairCutIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/gabale",
        "/demo/table",
        "/demo/tanstack-query",
        "/services/hair-cut/$id",
        "/services/hair-cut/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/gabale": {
      "filePath": "gabale.tsx"
    },
    "/demo/table": {
      "filePath": "demo.table.tsx"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/services/hair-cut/$id": {
      "filePath": "services/hair-cut/$id.tsx"
    },
    "/services/hair-cut/": {
      "filePath": "services/hair-cut/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
